----------------------------
Explanation
----------------------------

"A Hash Table is a Data Structure that provides mapping from keys to values using a technique called hashing."
- William Fiset

- Effectively, a Hash Table is an Array.
- Hash Tables associates the value that you want to store inside of the Array with a "key"
- The "key" is any comparable data type that is immutable e.g. string, integer, floating point.
- Hash Tables provide a hasing function that's basically a math expression that converts
the "key" to an index to use for the Array.
- It then places the value inside the position of the index provided by the hashing function.

What's awesome about the Hash Table is that it provides a constant (O(1)) look-up.
Basically, you pass in a key, the hash function does it's thing
then it returns the value associated with the index in the Array provided by the hash function.

E.g.
Let's say we have this Hash Table where Key = String, Value = Integer
{ "Mario" : 1, "Bob" : 2, "John" : 3 }

The HashTable uses a hash function to return an index from the Key to place inside the Array.
Assume H(x) is our Hash function definition where x = Key

H("Mario") => 0 => place 1 in index 0
H("Bob") => 1 => place 2 in index 1
H("John") => 2 => place 3 in index 2

Our array would then look like this:
[1, 2, 3]

----------------------------
Key Definitions
----------------------------

Hash Function - H(x)
---------------------
- "A hash function H(x) is a function that maps a key 'x' to a whole number in a fixed range."
- "E.g. H(x) = (x^2 - 6x + 9) mod 10 maps all integer keys to the range [0,9]"
- "H(4) = (16 - 24 + 9) mod 10 = 1"
- "H(-7) = (49 - 42 + 9) mod 10 = 0"
- "H(0) = (0 - 0 + 9) mod 10 = 9"

Hash Collision
---------------
- A hash collision is when KeyX != KeyY
- But after going though the Hash function, it returns the same integer/index for both Keys!
- H(KeyX) == H(KeyY) but KeyX != KeyY
- This is bad because KeyX and KeyY are obviously different, but resolves as the same value/index from the Hash Function.
Meaning that it will store it's value in the same index position in the Array when it is clearly meant to be
in different index positions.
- Luckily, there are 2 collision resolution techniques that can help us solve this problem:
- Separate Chaning, and Open Addressing

Collision Resolution - Separate Chaining
-----------------------------------------
- "Maintains an auxilary data structure (usually a linked list)
To hold all the different values which hashed to a particular value."
- Basically, a Linked List is stored inside of each element inside the array
- Acts kind of like a bucket, where each collision value is stored inside the Linked List
to form a "chain".

Example Linked List Separate Chaining Hash Table
Assume that the Key has already been hashed, and Value = String
0: null
1: "Rai" -> "Ryan"
2: "Rick"
3: "Will" -> "Finn"
4: "Leah" -> "Lara" -> "Mark"
5: null

Notice that now when we do a look-up, in the worst case it won't be O(1) anymore
Since we have to perform a linear lookup for the Linked List.
This raises the problem that if have a large Linked List / "Chain"
The look-up, insertion, removal, etc is going to be really slow.

The solution for this is to create a new, larger Hash Table and rehash all the elements
in the old Hash Table, and disperse them in new locations inside the new Hast Table.

Collisiion Resolution - Open Addressing
----------------------------------------